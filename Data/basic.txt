C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=53122:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\lucia\IdeaProjects\T3Individual\target\test-classes;C:\Users\lucia\IdeaProjects\T3Individual\target\classes;C:\Users\lucia\.m2\repository\org\openjdk\jmh\jmh-core\1.37\jmh-core-1.37.jar;C:\Users\lucia\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\lucia\.m2\repository\org\apache\commons\commons-math3\3.6.1\commons-math3-3.6.1.jar;C:\Users\lucia\.m2\repository\org\openjdk\jmh\jmh-generator-annprocess\1.37\jmh-generator-annprocess-1.37.jar;C:\Users\lucia\.m2\repository\com\aparapi\aparapi\2.0.0\aparapi-2.0.0.jar;C:\Users\lucia\.m2\repository\com\aparapi\aparapi-jni\1.4.2\aparapi-jni-1.4.2.jar;C:\Users\lucia\.m2\repository\org\apache\bcel\bcel\6.4.1\bcel-6.4.1.jar;C:\Users\lucia\.m2\repository\org\scala-lang\scala-library\2.13.1\scala-library-2.13.1.jar org.openjdk.jmh.Main "org.example.MatrixMultiplicationBenchmarking.*"
# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=53122:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.multiplication
# Parameters: (n = 10)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 0,013 ms/op
# Warmup Iteration   2: 0,004 ms/op
# Warmup Iteration   3: 0,002 ms/op
Iteration   1: 0,001 ms/op
Iteration   2: 0,001 ms/op
Iteration   3: 0,001 ms/op
Iteration   4: 
Matrix size: 10x10
Total Memory used: 3 MB
Total Heap Size: 40 MB
Available Cores: 16
0,001 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.multiplication":
  0,001 ±(99.9%) 0,001 ms/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
  CI (99.9%): [0,001, 0,002] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=53122:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.multiplication
# Parameters: (n = 100)

# Run progress: 16,67% complete, ETA 00:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 3,821 ms/op
# Warmup Iteration   2: 1,781 ms/op
# Warmup Iteration   3: 0,900 ms/op
Iteration   1: 0,889 ms/op
Iteration   2: 0,865 ms/op
Iteration   3: 0,912 ms/op
Iteration   4: 
Matrix size: 100x100
Total Memory used: 7 MB
Total Heap Size: 34 MB
Available Cores: 16
0,854 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.multiplication":
  0,880 ±(99.9%) 0,165 ms/op [Average]
  (min, avg, max) = (0,854, 0,880, 0,912), stdev = 0,026
  CI (99.9%): [0,715, 1,045] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=53122:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.multiplication
# Parameters: (n = 500)

# Run progress: 33,33% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 283,190 ms/op
# Warmup Iteration   2: 268,101 ms/op
# Warmup Iteration   3: 146,790 ms/op
Iteration   1: 140,847 ms/op
Iteration   2: 139,836 ms/op
Iteration   3: 142,869 ms/op
Iteration   4: 
Matrix size: 500x500
Total Memory used: 6 MB
Total Heap Size: 40 MB
Available Cores: 16
155,281 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.multiplication":
  144,708 ±(99.9%) 46,270 ms/op [Average]
  (min, avg, max) = (139,836, 144,708, 155,281), stdev = 7,160
  CI (99.9%): [98,438, 190,979] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=53122:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.multiplication
# Parameters: (n = 1000)

# Run progress: 50,00% complete, ETA 00:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 3079,033 ms/op
# Warmup Iteration   2: 2946,314 ms/op
# Warmup Iteration   3: 1804,443 ms/op
Iteration   1: 1569,824 ms/op
Iteration   2: 1484,341 ms/op
Iteration   3: 1503,448 ms/op
Iteration   4: 
Matrix size: 1000x1000
Total Memory used: 13 MB
Total Heap Size: 68 MB
Available Cores: 16
1765,156 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.multiplication":
  1580,692 ±(99.9%) 829,178 ms/op [Average]
  (min, avg, max) = (1484,341, 1580,692, 1765,156), stdev = 128,316
  CI (99.9%): [751,514, 2409,870] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=53122:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.multiplication
# Parameters: (n = 1500)

# Run progress: 66,67% complete, ETA 00:00:09
# Fork: 1 of 1
# Warmup Iteration   1: 20084,477 ms/op
# Warmup Iteration   2: 20117,172 ms/op
# Warmup Iteration   3: 20664,677 ms/op
Iteration   1: 50216,045 ms/op
Iteration   2: 28265,532 ms/op
Iteration   3: 54280,093 ms/op
Iteration   4: 
Matrix size: 1500x1500
Total Memory used: 24 MB
Total Heap Size: 128 MB
Available Cores: 16
52915,036 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.multiplication":
  46419,176 ±(99.9%) 78963,395 ms/op [Average]
  (min, avg, max) = (28265,532, 46419,176, 54280,093), stdev = 12219,673
  CI (99.9%): [≈ 0, 125382,571] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=53122:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.multiplication
# Parameters: (n = 2000)

# Run progress: 83,33% complete, ETA 00:00:53
# Fork: 1 of 1
# Warmup Iteration   1: 101253,766 ms/op
# Warmup Iteration   2: 115640,578 ms/op
# Warmup Iteration   3: 121650,320 ms/op
Iteration   1: 89064,354 ms/op
Iteration   2: 143700,973 ms/op
Iteration   3: 133816,476 ms/op
Iteration   4: 
Matrix size: 2000x2000
Total Memory used: 68 MB
Total Heap Size: 220 MB
Available Cores: 16
138879,366 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.multiplication":
  126365,292 ±(99.9%) 162794,601 ms/op [Average]
  (min, avg, max) = (89064,354, 126365,292, 143700,973), stdev = 25192,645
  CI (99.9%): [≈ 0, 289159,894] (assumes normal distribution)


# Run complete. Total time: 00:18:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                         (n)  Mode  Cnt       Score        Error  Units
MatrixMultiplicationBenchmarking.multiplication    10  avgt    4       0,001 ±      0,001  ms/op
MatrixMultiplicationBenchmarking.multiplication   100  avgt    4       0,880 ±      0,165  ms/op
MatrixMultiplicationBenchmarking.multiplication   500  avgt    4     144,708 ±     46,270  ms/op
MatrixMultiplicationBenchmarking.multiplication  1000  avgt    4    1580,692 ±    829,178  ms/op
MatrixMultiplicationBenchmarking.multiplication  1500  avgt    4   46419,176 ±  78963,395  ms/op
MatrixMultiplicationBenchmarking.multiplication  2000  avgt    4  126365,292 ± 162794,601  ms/op

Process finished with exit code 0
