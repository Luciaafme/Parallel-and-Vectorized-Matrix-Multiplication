C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54797:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\lucia\IdeaProjects\T3Individual\target\test-classes;C:\Users\lucia\IdeaProjects\T3Individual\target\classes;C:\Users\lucia\.m2\repository\org\openjdk\jmh\jmh-core\1.37\jmh-core-1.37.jar;C:\Users\lucia\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\lucia\.m2\repository\org\apache\commons\commons-math3\3.6.1\commons-math3-3.6.1.jar;C:\Users\lucia\.m2\repository\org\openjdk\jmh\jmh-generator-annprocess\1.37\jmh-generator-annprocess-1.37.jar;C:\Users\lucia\.m2\repository\com\aparapi\aparapi\2.0.0\aparapi-2.0.0.jar;C:\Users\lucia\.m2\repository\com\aparapi\aparapi-jni\1.4.2\aparapi-jni-1.4.2.jar;C:\Users\lucia\.m2\repository\org\apache\bcel\bcel\6.4.1\bcel-6.4.1.jar;C:\Users\lucia\.m2\repository\org\scala-lang\scala-library\2.13.1\scala-library-2.13.1.jar org.openjdk.jmh.Main "org.example.MatrixMultiplicationBenchmarking.*"
# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54797:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.atomicMultiplication
# Parameters: (n = 10)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 0,004 ms/op
# Warmup Iteration   2: 0,002 ms/op
# Warmup Iteration   3: 0,001 ms/op
Iteration   1: 0,001 ms/op
Iteration   2: 0,001 ms/op
Iteration   3: 0,001 ms/op
Iteration   4: 
Matrix size: 10x10
Total Memory used: 4 MB
Total Heap Size: 40 MB
Available Cores: 16
0,001 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.atomicMultiplication":
  0,001 ±(99.9%) 0,001 ms/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
  CI (99.9%): [≈ 10⁻³, 0,002] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54797:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.atomicMultiplication
# Parameters: (n = 100)

# Run progress: 16,67% complete, ETA 00:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 5,476 ms/op
# Warmup Iteration   2: 2,130 ms/op
# Warmup Iteration   3: 0,883 ms/op
Iteration   1: 0,832 ms/op
Iteration   2: 0,647 ms/op
Iteration   3: 0,669 ms/op
Iteration   4: 
Matrix size: 100x100
Total Memory used: 1 MB
Total Heap Size: 34 MB
Available Cores: 16
0,765 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.atomicMultiplication":
  0,728 ±(99.9%) 0,556 ms/op [Average]
  (min, avg, max) = (0,647, 0,728, 0,832), stdev = 0,086
  CI (99.9%): [0,172, 1,284] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54797:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.atomicMultiplication
# Parameters: (n = 500)

# Run progress: 33,33% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 264,880 ms/op
# Warmup Iteration   2: 253,423 ms/op
# Warmup Iteration   3: 126,567 ms/op
Iteration   1: 120,271 ms/op
Iteration   2: 124,760 ms/op
Iteration   3: 130,110 ms/op
Iteration   4: 
Matrix size: 500x500
Total Memory used: 4 MB
Total Heap Size: 48 MB
Available Cores: 16
116,542 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.atomicMultiplication":
  122,921 ±(99.9%) 37,823 ms/op [Average]
  (min, avg, max) = (116,542, 122,921, 130,110), stdev = 5,853
  CI (99.9%): [85,097, 160,744] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54797:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.atomicMultiplication
# Parameters: (n = 1000)

# Run progress: 50,00% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 3622,057 ms/op
# Warmup Iteration   2: 3630,431 ms/op
# Warmup Iteration   3: 1804,813 ms/op
Iteration   1: 1804,672 ms/op
Iteration   2: 1876,721 ms/op
Iteration   3: 1700,082 ms/op
Iteration   4: 
Matrix size: 1000x1000
Total Memory used: 13 MB
Total Heap Size: 60 MB
Available Cores: 16
1852,433 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.atomicMultiplication":
  1808,477 ±(99.9%) 505,433 ms/op [Average]
  (min, avg, max) = (1700,082, 1808,477, 1876,721), stdev = 78,216
  CI (99.9%): [1303,044, 2313,910] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54797:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.atomicMultiplication
# Parameters: (n = 1500)

# Run progress: 66,67% complete, ETA 00:00:10
# Fork: 1 of 1
# Warmup Iteration   1: 21584,014 ms/op
# Warmup Iteration   2: 20810,300 ms/op
# Warmup Iteration   3: 20550,952 ms/op
Iteration   1: 21283,495 ms/op
Iteration   2: 22128,624 ms/op
Iteration   3: 22893,531 ms/op
Iteration   4: 
Matrix size: 1500x1500
Total Memory used: 32 MB
Total Heap Size: 128 MB
Available Cores: 16
32304,264 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.atomicMultiplication":
  24652,478 ±(99.9%) 33236,580 ms/op [Average]
  (min, avg, max) = (21283,495, 24652,478, 32304,264), stdev = 5143,398
  CI (99.9%): [≈ 0, 57889,059] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54797:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.atomicMultiplication
# Parameters: (n = 2000)

# Run progress: 83,33% complete, ETA 00:00:36
# Fork: 1 of 1
# Warmup Iteration   1: 56657,055 ms/op
# Warmup Iteration   2: 57222,012 ms/op
# Warmup Iteration   3: 71827,054 ms/op
Iteration   1: 61327,681 ms/op
Iteration   2: 80851,008 ms/op
Iteration   3: 142378,628 ms/op
Iteration   4: 
Matrix size: 2000x2000
Total Memory used: 72 MB
Total Heap Size: 220 MB
Available Cores: 16
86594,548 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.atomicMultiplication":
  92787,966 ±(99.9%) 224775,469 ms/op [Average]
  (min, avg, max) = (61327,681, 92787,966, 142378,628), stdev = 34784,253
  CI (99.9%): [≈ 0, 317563,435] (assumes normal distribution)


# Run complete. Total time: 00:12:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                               (n)  Mode  Cnt      Score        Error  Units
MatrixMultiplicationBenchmarking.atomicMultiplication    10  avgt    4      0,001 ±      0,001  ms/op
MatrixMultiplicationBenchmarking.atomicMultiplication   100  avgt    4      0,728 ±      0,556  ms/op
MatrixMultiplicationBenchmarking.atomicMultiplication   500  avgt    4    122,921 ±     37,823  ms/op
MatrixMultiplicationBenchmarking.atomicMultiplication  1000  avgt    4   1808,477 ±    505,433  ms/op
MatrixMultiplicationBenchmarking.atomicMultiplication  1500  avgt    4  24652,478 ±  33236,580  ms/op
MatrixMultiplicationBenchmarking.atomicMultiplication  2000  avgt    4  92787,966 ± 224775,469  ms/op

Process finished with exit code 0
