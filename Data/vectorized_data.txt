C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54531:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\lucia\IdeaProjects\T3Individual\target\test-classes;C:\Users\lucia\IdeaProjects\T3Individual\target\classes;C:\Users\lucia\.m2\repository\org\openjdk\jmh\jmh-core\1.37\jmh-core-1.37.jar;C:\Users\lucia\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\lucia\.m2\repository\org\apache\commons\commons-math3\3.6.1\commons-math3-3.6.1.jar;C:\Users\lucia\.m2\repository\org\openjdk\jmh\jmh-generator-annprocess\1.37\jmh-generator-annprocess-1.37.jar;C:\Users\lucia\.m2\repository\com\aparapi\aparapi\2.0.0\aparapi-2.0.0.jar;C:\Users\lucia\.m2\repository\com\aparapi\aparapi-jni\1.4.2\aparapi-jni-1.4.2.jar;C:\Users\lucia\.m2\repository\org\apache\bcel\bcel\6.4.1\bcel-6.4.1.jar;C:\Users\lucia\.m2\repository\org\scala-lang\scala-library\2.13.1\scala-library-2.13.1.jar org.openjdk.jmh.Main "org.example.MatrixMultiplicationBenchmarking.*"
# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54531:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication
# Parameters: (n = 10)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 291,537 ms/op
# Warmup Iteration   2: 1,236 ms/op
# Warmup Iteration   3: 0,589 ms/op
Iteration   1: 0,546 ms/op
Iteration   2: 0,715 ms/op
Iteration   3: 0,728 ms/op
Iteration   4: 
Matrix size: 10x10
Total Memory used: 7 MB
Total Heap Size: 34 MB
Available Cores: 16
0,487 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication":
  0,619 ±(99.9%) 0,781 ms/op [Average]
  (min, avg, max) = (0,487, 0,619, 0,728), stdev = 0,121
  CI (99.9%): [≈ 0, 1,400] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54531:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication
# Parameters: (n = 100)

# Run progress: 16,67% complete, ETA 00:00:06
# Fork: 1 of 1
# Warmup Iteration   1: 234,960 ms/op
# Warmup Iteration   2: 2,043 ms/op
# Warmup Iteration   3: 1,514 ms/op
Iteration   1: 1,624 ms/op
Iteration   2: 2,323 ms/op
Iteration   3: 1,994 ms/op
Iteration   4: 
Matrix size: 100x100
Total Memory used: 15 MB
Total Heap Size: 34 MB
Available Cores: 16
1,539 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication":
  1,870 ±(99.9%) 2,331 ms/op [Average]
  (min, avg, max) = (1,539, 1,870, 2,323), stdev = 0,361
  CI (99.9%): [≈ 0, 4,201] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54531:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication
# Parameters: (n = 500)

# Run progress: 33,33% complete, ETA 00:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 427,496 ms/op
# Warmup Iteration   2: 44,670 ms/op
# Warmup Iteration   3: 37,627 ms/op
Iteration   1: 37,313 ms/op
Iteration   2: 31,252 ms/op
Iteration   3: 32,210 ms/op
Iteration   4: 
Matrix size: 500x500
Total Memory used: 55 MB
Total Heap Size: 40 MB
Available Cores: 16
33,515 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication":
  33,573 ±(99.9%) 17,192 ms/op [Average]
  (min, avg, max) = (31,252, 33,573, 37,313), stdev = 2,661
  CI (99.9%): [16,380, 50,765] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54531:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication
# Parameters: (n = 1000)

# Run progress: 50,00% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 966,545 ms/op
# Warmup Iteration   2: 246,324 ms/op
# Warmup Iteration   3: 248,192 ms/op
Iteration   1: 231,133 ms/op
Iteration   2: 267,596 ms/op
Iteration   3: 239,567 ms/op
Iteration   4: 
Matrix size: 1000x1000
Total Memory used: 179 MB
Total Heap Size: 68 MB
Available Cores: 16
248,206 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication":
  246,625 ±(99.9%) 100,948 ms/op [Average]
  (min, avg, max) = (231,133, 246,625, 267,596), stdev = 15,622
  CI (99.9%): [145,678, 347,573] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54531:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication
# Parameters: (n = 1500)

# Run progress: 66,67% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 2962,114 ms/op
# Warmup Iteration   2: 1596,517 ms/op
# Warmup Iteration   3: 1645,969 ms/op
Iteration   1: 1759,099 ms/op
Iteration   2: 1735,282 ms/op
Iteration   3: 1873,270 ms/op
Iteration   4: 
Matrix size: 1500x1500
Total Memory used: 451 MB
Total Heap Size: 128 MB
Available Cores: 16
6894,767 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication":
  3065,605 ±(99.9%) 16500,593 ms/op [Average]
  (min, avg, max) = (1735,282, 3065,605, 6894,767), stdev = 2553,485
  CI (99.9%): [≈ 0, 19566,197] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+8-LTS
# VM invoker: C:\Users\lucia\.jdks\corretto-17.0.8.1\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54531:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 ms each
# Measurement: 4 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication
# Parameters: (n = 2000)

# Run progress: 83,33% complete, ETA 00:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 18719,901 ms/op
# Warmup Iteration   2: 37104,975 ms/op
# Warmup Iteration   3: 23550,681 ms/op
Iteration   1: 31109,077 ms/op
Iteration   2: 26430,158 ms/op
Iteration   3: 13076,505 ms/op
Iteration   4: 
Matrix size: 2000x2000
Total Memory used: 707 MB
Total Heap Size: 220 MB
Available Cores: 16
14061,654 ms/op


Result "org.example.MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication":
  21169,348 ±(99.9%) 58096,573 ms/op [Average]
  (min, avg, max) = (13076,505, 21169,348, 31109,077), stdev = 8990,509
  CI (99.9%): [≈ 0, 79265,921] (assumes normal distribution)


# Run complete. Total time: 00:03:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                         (n)  Mode  Cnt      Score       Error  Units
MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication    10  avgt    4      0,619 ±     0,781  ms/op
MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication   100  avgt    4      1,870 ±     2,331  ms/op
MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication   500  avgt    4     33,573 ±    17,192  ms/op
MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication  1000  avgt    4    246,625 ±   100,948  ms/op
MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication  1500  avgt    4   3065,605 ± 16500,593  ms/op
MatrixMultiplicationBenchmarking.VectorizedMatrixMultiplication  2000  avgt    4  21169,348 ± 58096,573  ms/op

Process finished with exit code 0
